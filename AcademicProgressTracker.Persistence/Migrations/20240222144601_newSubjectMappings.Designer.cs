// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    [Migration("20240222144601_newSubjectMappings")]
    partial class newSubjectMappings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearCreated")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b239dfe-4acd-4959-bb9e-7e4adc7ad74a"),
                            Course = 4,
                            Name = "ДИПРБ",
                            YearCreated = 2020
                        },
                        new
                        {
                            Id = new Guid("c38a9c37-db2c-44ea-9481-1149352afd45"),
                            Course = 4,
                            Name = "ДИИЭБ",
                            YearCreated = 2020
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("MaximumScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LabWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("865b5254-9ac3-4df6-85c8-a2274c59bad8"),
                            MaximumScore = 10m,
                            Number = 1,
                            SubjectId = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971")
                        },
                        new
                        {
                            Id = new Guid("e63500d2-9280-48d2-bf20-16543d2c78e9"),
                            MaximumScore = 10m,
                            Number = 2,
                            SubjectId = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971")
                        },
                        new
                        {
                            Id = new Guid("0cb324f4-3f83-4c04-9196-79ed7eba17c3"),
                            MaximumScore = 10m,
                            Number = 3,
                            SubjectId = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971")
                        },
                        new
                        {
                            Id = new Guid("15c2855e-dbb7-4029-8a7c-f12a240ad1ff"),
                            MaximumScore = 10m,
                            Number = 4,
                            SubjectId = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("001c90a7-d489-4ff5-a238-c73507e57bf3"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("865b5254-9ac3-4df6-85c8-a2274c59bad8"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        },
                        new
                        {
                            Id = new Guid("257ec693-2677-4399-8da9-a8f7c47e7914"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("e63500d2-9280-48d2-bf20-16543d2c78e9"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        },
                        new
                        {
                            Id = new Guid("d261b44e-3636-4765-8346-c844543f3424"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("0cb324f4-3f83-4c04-9196-79ed7eba17c3"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        },
                        new
                        {
                            Id = new Guid("82ee2645-3496-4931-aecc-72827ca2d821"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("15c2855e-dbb7-4029-8a7c-f12a240ad1ff"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09935fdc-31a2-4d6b-8333-ca47d8922762"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("ccd97ef2-a778-4c63-831b-5c3616448ae5"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("f4a9daa5-71d4-4180-88c2-c672b0a48a3f"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971"),
                            GroupId = new Guid("8b239dfe-4acd-4959-bb9e-7e4adc7ad74a"),
                            Name = "СУБД PostgreSQL",
                            Semester = 0
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("307af7a3-a320-424b-8911-cce950b3ac92"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 126, 204, 112, 216, 174, 195, 158, 240, 194, 121, 244, 192, 12, 14, 205, 233, 3, 147, 213, 5, 197, 151, 80, 174, 179, 13, 188, 54, 1, 97, 204, 1, 93, 102, 21, 5, 132, 48, 148, 170, 90, 82, 8, 148, 136, 161, 195, 53, 246, 190, 188, 177, 45, 149, 236, 43, 234, 89, 37, 181, 172, 141, 104, 95 },
                            PasswordSalt = new byte[] { 205, 154, 97, 11, 88, 41, 199, 117, 131, 212, 169, 245, 130, 186, 109, 154, 252, 22, 128, 62, 18, 104, 252, 172, 203, 130, 7, 187, 129, 18, 97, 165, 252, 152, 165, 166, 132, 30, 215, 115, 174, 32, 166, 76, 75, 255, 120, 129, 227, 23, 109, 82, 222, 45, 162, 194, 219, 225, 208, 57, 175, 218, 168, 56, 127, 1, 33, 92, 202, 74, 115, 112, 186, 28, 170, 134, 193, 34, 99, 93, 90, 178, 117, 119, 47, 239, 85, 89, 74, 183, 80, 121, 28, 30, 137, 175, 233, 201, 207, 119, 24, 191, 27, 30, 177, 173, 95, 178, 185, 206, 115, 9, 93, 8, 75, 100, 78, 219, 21, 152, 156, 68, 237, 147, 190, 167, 171, 86 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("28edf8e3-b727-4928-b963-37fdade17663"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 113, 92, 120, 40, 163, 156, 51, 17, 113, 38, 56, 203, 231, 239, 193, 218, 110, 122, 16, 235, 209, 138, 140, 247, 211, 82, 83, 219, 135, 102, 106, 225, 41, 252, 150, 145, 201, 244, 47, 95, 54, 162, 32, 194, 182, 165, 136, 247, 30, 145, 172, 15, 53, 101, 80, 87, 91, 20, 125, 90, 108, 218, 215, 7 },
                            PasswordSalt = new byte[] { 152, 21, 241, 224, 219, 34, 110, 241, 166, 28, 185, 238, 191, 212, 233, 210, 120, 96, 99, 105, 131, 211, 126, 107, 121, 173, 204, 153, 52, 163, 240, 82, 190, 229, 203, 21, 3, 206, 25, 51, 66, 187, 14, 56, 31, 0, 170, 96, 64, 24, 241, 82, 243, 135, 145, 4, 225, 7, 151, 31, 125, 62, 85, 255, 214, 199, 96, 26, 36, 144, 170, 240, 242, 236, 19, 39, 80, 37, 246, 45, 59, 185, 45, 97, 137, 104, 141, 60, 80, 174, 126, 72, 226, 121, 50, 197, 142, 34, 41, 37, 226, 234, 141, 224, 151, 147, 252, 225, 211, 64, 157, 16, 182, 49, 110, 89, 39, 165, 142, 152, 2, 198, 63, 232, 86, 247, 200, 249 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("03190e00-b8c9-40ee-a919-2dd75273c91c"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 73, 232, 138, 104, 93, 255, 0, 8, 148, 198, 200, 133, 19, 24, 18, 211, 110, 187, 61, 107, 113, 83, 46, 255, 55, 184, 162, 19, 230, 25, 246, 66, 68, 229, 87, 209, 180, 143, 37, 16, 174, 188, 234, 93, 217, 254, 232, 127, 24, 140, 190, 153, 187, 241, 236, 229, 237, 5, 152, 216, 60, 187, 142, 76 },
                            PasswordSalt = new byte[] { 5, 63, 36, 21, 186, 219, 80, 12, 193, 40, 36, 9, 84, 68, 23, 119, 49, 202, 83, 188, 121, 188, 136, 186, 58, 153, 254, 165, 246, 51, 157, 178, 82, 75, 27, 212, 39, 70, 84, 25, 59, 56, 59, 137, 56, 44, 125, 187, 167, 44, 57, 202, 160, 73, 215, 86, 118, 115, 114, 159, 162, 116, 79, 80, 225, 243, 4, 174, 192, 77, 44, 253, 251, 221, 233, 97, 26, 139, 216, 81, 130, 54, 35, 68, 167, 143, 113, 115, 101, 73, 216, 0, 143, 0, 3, 104, 90, 109, 53, 68, 210, 244, 39, 202, 32, 223, 214, 121, 54, 252, 94, 234, 173, 215, 30, 85, 207, 186, 44, 223, 246, 225, 161, 164, 112, 138, 61, 213 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("17947956-c749-4219-9565-c2f3bac4fd82"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 188, 212, 97, 15, 238, 178, 230, 50, 69, 165, 228, 79, 191, 158, 226, 210, 34, 64, 225, 151, 136, 58, 235, 2, 53, 32, 44, 135, 23, 42, 9, 235, 191, 29, 184, 159, 168, 26, 252, 55, 179, 50, 131, 82, 41, 185, 212, 29, 41, 32, 157, 157, 53, 2, 8, 9, 26, 35, 178, 8, 41, 12, 29, 17 },
                            PasswordSalt = new byte[] { 15, 128, 176, 243, 237, 197, 72, 102, 72, 160, 84, 5, 116, 28, 13, 124, 6, 94, 114, 5, 190, 253, 72, 126, 219, 99, 163, 82, 254, 43, 13, 161, 85, 230, 241, 166, 81, 136, 135, 114, 10, 193, 20, 52, 17, 237, 228, 93, 228, 179, 183, 28, 232, 222, 134, 180, 169, 156, 76, 53, 70, 62, 2, 94, 150, 218, 1, 230, 34, 141, 107, 160, 65, 92, 122, 97, 220, 4, 56, 190, 116, 74, 98, 155, 195, 210, 67, 195, 88, 88, 218, 128, 227, 251, 223, 193, 102, 29, 208, 83, 4, 194, 177, 231, 231, 185, 195, 198, 147, 128, 250, 166, 121, 165, 64, 192, 55, 154, 121, 82, 70, 59, 66, 173, 3, 208, 85, 46 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a9cf853-571c-4a04-a0e3-c7f8be3d0208"),
                            SubjectNameApiTable = "История россии",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("300a6a12-aed4-4b2b-a4e7-f94142ee92e7"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("993227ee-2473-433d-ac03-f8084f7ac6ea"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("db2bee0f-d229-4c5b-93cf-2996aef2878d"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("83109135-225f-4f38-9137-7e74daa450dc"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("00016423-c6ba-438a-b5db-76dfde069e20"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("dc869a1d-f55e-403c-be67-0efc15d5fad2"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("9c1926fb-3ace-4e5f-baf6-73377696becf"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("cd57ef93-098a-4a97-ac0e-67eefa8148f6"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("0b0e8e95-906c-4322-9546-7300f5e62687"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("6f3b42fa-8856-4dcf-a3e8-60f14de6fd6f"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("1c57fb10-f83d-431e-99bd-5f363ed524b3"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("abe4f5df-5fea-43ae-abd2-bc75d5b901e3"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("af150650-8e12-48c7-8ccf-f9007c839294"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("7d03f28f-b8c2-4af9-9cd8-1e24768ce971"),
                            UserId = new Guid("03190e00-b8c9-40ee-a919-2dd75273c91c")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '09935fdc-31a2-4d6b-8333-ca47d8922762'");

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83521249-4ee2-45d5-aa5d-8eb8a76faf44"),
                            GroupId = new Guid("8b239dfe-4acd-4959-bb9e-7e4adc7ad74a"),
                            RoleId = new Guid("09935fdc-31a2-4d6b-8333-ca47d8922762"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        },
                        new
                        {
                            Id = new Guid("f3e80f53-1fda-48e0-b83b-c2ecb3af8eeb"),
                            GroupId = new Guid("c38a9c37-db2c-44ea-9481-1149352afd45"),
                            RoleId = new Guid("ccd97ef2-a778-4c63-831b-5c3616448ae5"),
                            UserId = new Guid("03190e00-b8c9-40ee-a919-2dd75273c91c")
                        },
                        new
                        {
                            Id = new Guid("20a6086e-2af5-48e5-8b78-352ded2ffdf6"),
                            GroupId = new Guid("8b239dfe-4acd-4959-bb9e-7e4adc7ad74a"),
                            RoleId = new Guid("ccd97ef2-a778-4c63-831b-5c3616448ae5"),
                            UserId = new Guid("03190e00-b8c9-40ee-a919-2dd75273c91c")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("f4a9daa5-71d4-4180-88c2-c672b0a48a3f"),
                            UserId = new Guid("307af7a3-a320-424b-8911-cce950b3ac92")
                        },
                        new
                        {
                            RoleId = new Guid("09935fdc-31a2-4d6b-8333-ca47d8922762"),
                            UserId = new Guid("28edf8e3-b727-4928-b963-37fdade17663")
                        },
                        new
                        {
                            RoleId = new Guid("ccd97ef2-a778-4c63-831b-5c3616448ae5"),
                            UserId = new Guid("03190e00-b8c9-40ee-a919-2dd75273c91c")
                        },
                        new
                        {
                            RoleId = new Guid("ccd97ef2-a778-4c63-831b-5c3616448ae5"),
                            UserId = new Guid("17947956-c749-4219-9565-c2f3bac4fd82")
                        },
                        new
                        {
                            RoleId = new Guid("f4a9daa5-71d4-4180-88c2-c672b0a48a3f"),
                            UserId = new Guid("17947956-c749-4219-9565-c2f3bac4fd82")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany()
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
