// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    [Migration("20240220103847_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearCreated")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b44185a6-d896-4085-a48e-daaee4b9d3ec"),
                            Course = 4,
                            Name = "ДИПРБ",
                            YearCreated = 2020
                        },
                        new
                        {
                            Id = new Guid("c1afa60f-c6aa-46b0-b97e-5011c02d3ba4"),
                            Course = 4,
                            Name = "ДИИЭБ",
                            YearCreated = 2020
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("MaximumScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LabWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98048840-72eb-4f15-8bfe-162904df1d04"),
                            MaximumScore = 10m,
                            Number = 1,
                            SubjectId = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444")
                        },
                        new
                        {
                            Id = new Guid("5feed908-153c-4729-bbb5-09ec65543040"),
                            MaximumScore = 10m,
                            Number = 2,
                            SubjectId = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444")
                        },
                        new
                        {
                            Id = new Guid("ae66032b-c718-46a0-96f9-016cd2577d78"),
                            MaximumScore = 10m,
                            Number = 3,
                            SubjectId = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444")
                        },
                        new
                        {
                            Id = new Guid("bca93801-ffa2-4269-a9f2-6db80c6b689a"),
                            MaximumScore = 10m,
                            Number = 4,
                            SubjectId = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29ab33e4-21d3-4a41-aa04-d18701aec85b"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("98048840-72eb-4f15-8bfe-162904df1d04"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        },
                        new
                        {
                            Id = new Guid("6bece117-22d9-4d8e-8045-6c4f721e83d1"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("5feed908-153c-4729-bbb5-09ec65543040"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        },
                        new
                        {
                            Id = new Guid("adac3f97-a6fe-41f7-a2ed-9293365ea376"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("ae66032b-c718-46a0-96f9-016cd2577d78"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        },
                        new
                        {
                            Id = new Guid("5f76e680-d93a-40a8-82ef-8c12d5ca628c"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("bca93801-ffa2-4269-a9f2-6db80c6b689a"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de8c887-8e3d-42e3-8de2-ec13b0c52f01"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("00542190-6d74-4ca5-98be-a9c9ced21c3c"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("56ec748e-6719-4534-8491-b332582b95ad"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444"),
                            GroupId = new Guid("b44185a6-d896-4085-a48e-daaee4b9d3ec"),
                            Name = "СУБД PostgreSQL",
                            Semester = 0
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b73e408-2fe1-455c-b9e5-2a3dc81481aa"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 71, 18, 82, 136, 39, 215, 102, 80, 252, 23, 213, 43, 43, 60, 96, 151, 190, 80, 254, 56, 5, 196, 156, 157, 32, 238, 46, 130, 156, 95, 11, 75, 7, 80, 139, 157, 237, 3, 191, 214, 173, 188, 90, 109, 45, 149, 128, 34, 201, 50, 138, 210, 50, 96, 124, 151, 223, 186, 101, 27, 4, 149, 115, 173 },
                            PasswordSalt = new byte[] { 132, 52, 209, 212, 224, 219, 108, 77, 52, 38, 72, 168, 209, 244, 125, 186, 182, 41, 94, 174, 86, 209, 188, 232, 110, 115, 18, 122, 150, 82, 161, 83, 4, 189, 69, 54, 101, 43, 103, 99, 115, 146, 100, 117, 132, 13, 29, 212, 199, 209, 111, 141, 84, 31, 21, 79, 33, 78, 130, 35, 25, 8, 167, 159, 32, 132, 242, 124, 209, 20, 252, 18, 82, 119, 189, 55, 132, 114, 156, 222, 240, 158, 127, 148, 120, 26, 138, 150, 81, 65, 15, 246, 166, 52, 57, 62, 254, 14, 184, 130, 53, 12, 80, 140, 25, 8, 119, 229, 78, 54, 127, 61, 9, 141, 225, 76, 122, 142, 27, 133, 171, 145, 194, 127, 210, 158, 45, 63 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 215, 217, 30, 116, 67, 171, 20, 76, 191, 48, 207, 75, 182, 232, 41, 197, 197, 219, 132, 120, 195, 28, 208, 25, 59, 103, 187, 223, 115, 104, 241, 65, 250, 89, 154, 182, 42, 149, 125, 6, 144, 52, 177, 206, 210, 217, 210, 63, 8, 186, 113, 110, 235, 67, 116, 1, 124, 85, 229, 144, 203, 62, 83, 172 },
                            PasswordSalt = new byte[] { 188, 46, 206, 23, 130, 87, 42, 136, 214, 142, 136, 60, 254, 190, 61, 166, 153, 27, 182, 50, 255, 142, 90, 233, 23, 31, 162, 62, 171, 117, 159, 2, 166, 159, 97, 12, 162, 0, 51, 37, 185, 183, 216, 100, 129, 201, 30, 171, 219, 77, 177, 238, 97, 140, 234, 56, 181, 69, 149, 167, 234, 120, 117, 60, 15, 186, 1, 200, 185, 22, 103, 217, 142, 84, 84, 158, 79, 42, 76, 48, 174, 178, 181, 18, 168, 161, 140, 191, 86, 137, 178, 16, 46, 203, 244, 83, 204, 104, 130, 250, 164, 130, 59, 10, 87, 207, 212, 18, 101, 60, 252, 167, 73, 134, 74, 119, 47, 15, 53, 92, 226, 156, 9, 84, 190, 110, 185, 203 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6699c2d3-7fb4-4b13-b337-fa9e2492bece"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 239, 90, 8, 91, 23, 50, 123, 97, 130, 190, 126, 3, 106, 33, 77, 60, 12, 25, 32, 136, 196, 153, 169, 218, 45, 199, 194, 217, 252, 83, 10, 9, 197, 30, 152, 54, 64, 189, 227, 70, 232, 187, 78, 133, 222, 80, 222, 18, 135, 215, 54, 253, 0, 226, 168, 102, 148, 112, 66, 254, 55, 22, 114, 143 },
                            PasswordSalt = new byte[] { 51, 232, 78, 82, 155, 225, 98, 98, 153, 247, 103, 118, 133, 44, 214, 91, 252, 111, 214, 57, 59, 249, 117, 232, 81, 238, 144, 24, 223, 79, 31, 230, 208, 103, 13, 123, 67, 148, 253, 213, 248, 254, 22, 195, 50, 237, 93, 146, 17, 164, 69, 91, 1, 37, 139, 231, 139, 68, 73, 120, 165, 200, 17, 80, 27, 24, 72, 72, 82, 246, 20, 144, 39, 116, 220, 16, 0, 167, 226, 132, 117, 181, 133, 70, 123, 37, 45, 238, 36, 61, 249, 95, 161, 94, 223, 47, 157, 207, 154, 208, 24, 163, 145, 108, 28, 176, 128, 194, 22, 233, 249, 125, 69, 125, 175, 64, 119, 27, 56, 96, 71, 116, 62, 253, 75, 170, 139, 67 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("24b3720e-a08f-4568-9498-237ceecc41f0"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 7, 106, 129, 11, 191, 44, 16, 205, 62, 97, 13, 30, 8, 25, 49, 132, 68, 220, 192, 50, 253, 208, 160, 148, 167, 149, 65, 159, 83, 121, 120, 59, 194, 206, 38, 57, 152, 69, 81, 176, 249, 194, 115, 53, 27, 177, 188, 67, 73, 26, 242, 232, 219, 148, 24, 240, 13, 142, 44, 13, 21, 55, 86, 21 },
                            PasswordSalt = new byte[] { 172, 117, 179, 152, 39, 48, 75, 44, 17, 193, 29, 111, 251, 252, 242, 51, 199, 211, 238, 117, 138, 64, 99, 99, 71, 81, 202, 119, 44, 232, 67, 35, 110, 68, 65, 52, 106, 46, 108, 45, 192, 233, 69, 18, 151, 59, 119, 66, 85, 150, 250, 94, 251, 99, 169, 187, 75, 120, 248, 59, 24, 172, 40, 52, 151, 213, 24, 68, 194, 67, 185, 175, 164, 184, 60, 11, 67, 125, 131, 253, 86, 56, 173, 100, 176, 199, 63, 185, 132, 56, 153, 82, 4, 132, 91, 93, 184, 101, 112, 32, 124, 206, 125, 125, 46, 211, 20, 85, 180, 255, 209, 99, 254, 145, 142, 88, 65, 203, 166, 145, 238, 207, 10, 137, 102, 213, 93, 203 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("6f5d821a-f421-459b-8e6d-171b90d80444"),
                            UserId = new Guid("6699c2d3-7fb4-4b13-b337-fa9e2492bece")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '7de8c887-8e3d-42e3-8de2-ec13b0c52f01'");

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b52c035c-495a-4f36-a1bf-61b06b055977"),
                            GroupId = new Guid("b44185a6-d896-4085-a48e-daaee4b9d3ec"),
                            RoleId = new Guid("7de8c887-8e3d-42e3-8de2-ec13b0c52f01"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        },
                        new
                        {
                            Id = new Guid("e30817d5-4173-46aa-855d-fa267e574aee"),
                            GroupId = new Guid("c1afa60f-c6aa-46b0-b97e-5011c02d3ba4"),
                            RoleId = new Guid("00542190-6d74-4ca5-98be-a9c9ced21c3c"),
                            UserId = new Guid("6699c2d3-7fb4-4b13-b337-fa9e2492bece")
                        },
                        new
                        {
                            Id = new Guid("573cf133-8c57-410f-b5dd-3dcf2d359d4e"),
                            GroupId = new Guid("b44185a6-d896-4085-a48e-daaee4b9d3ec"),
                            RoleId = new Guid("00542190-6d74-4ca5-98be-a9c9ced21c3c"),
                            UserId = new Guid("6699c2d3-7fb4-4b13-b337-fa9e2492bece")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("56ec748e-6719-4534-8491-b332582b95ad"),
                            UserId = new Guid("1b73e408-2fe1-455c-b9e5-2a3dc81481aa")
                        },
                        new
                        {
                            RoleId = new Guid("7de8c887-8e3d-42e3-8de2-ec13b0c52f01"),
                            UserId = new Guid("5a2e67ee-7554-4993-b248-1c8ce83d72d8")
                        },
                        new
                        {
                            RoleId = new Guid("00542190-6d74-4ca5-98be-a9c9ced21c3c"),
                            UserId = new Guid("6699c2d3-7fb4-4b13-b337-fa9e2492bece")
                        },
                        new
                        {
                            RoleId = new Guid("00542190-6d74-4ca5-98be-a9c9ced21c3c"),
                            UserId = new Guid("24b3720e-a08f-4568-9498-237ceecc41f0")
                        },
                        new
                        {
                            RoleId = new Guid("56ec748e-6719-4534-8491-b332582b95ad"),
                            UserId = new Guid("24b3720e-a08f-4568-9498-237ceecc41f0")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany()
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
