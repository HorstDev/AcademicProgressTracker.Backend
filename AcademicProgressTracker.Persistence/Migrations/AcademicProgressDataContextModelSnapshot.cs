// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    partial class AcademicProgressDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RealStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8720f64-b4de-41a5-a621-66a78645bdbb"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("d6b3cac4-eb6e-49e7-a61f-68e2a539c148"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("0b595b0f-948d-4f48-b664-e5c944eb0764"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9699fccd-e0f6-41d4-a8a2-3b03e5591192"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 94, 22, 230, 189, 161, 65, 77, 233, 215, 89, 101, 217, 31, 160, 41, 216, 33, 186, 104, 64, 146, 3, 118, 168, 102, 16, 147, 122, 132, 136, 145, 126, 72, 65, 96, 144, 193, 240, 165, 28, 195, 184, 221, 131, 10, 126, 62, 206, 110, 215, 61, 149, 100, 64, 251, 140, 99, 2, 42, 48, 21, 180, 106, 126 },
                            PasswordSalt = new byte[] { 205, 54, 157, 11, 172, 71, 250, 177, 99, 185, 27, 169, 78, 239, 227, 139, 19, 215, 164, 255, 254, 88, 206, 78, 45, 228, 21, 253, 211, 217, 95, 90, 5, 167, 105, 57, 77, 241, 56, 61, 190, 97, 209, 83, 21, 140, 83, 216, 86, 200, 189, 32, 1, 188, 108, 67, 123, 183, 252, 215, 203, 182, 4, 111, 2, 89, 85, 154, 84, 61, 217, 150, 87, 137, 4, 20, 18, 67, 37, 9, 177, 192, 96, 77, 180, 230, 186, 108, 105, 113, 61, 55, 154, 20, 129, 230, 199, 146, 113, 175, 246, 66, 45, 208, 154, 250, 26, 52, 131, 46, 75, 184, 80, 49, 214, 42, 2, 140, 124, 153, 39, 248, 4, 83, 9, 165, 133, 240 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dbe9aa58-c3f9-4ee2-99b3-53a725685db6"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 127, 33, 176, 182, 26, 222, 109, 245, 204, 118, 115, 215, 188, 231, 182, 232, 191, 176, 134, 122, 176, 200, 197, 191, 99, 141, 207, 196, 70, 117, 127, 74, 61, 109, 79, 112, 112, 30, 4, 75, 100, 107, 82, 74, 35, 202, 172, 221, 31, 148, 231, 107, 91, 130, 129, 232, 182, 3, 194, 9, 113, 36, 196, 82 },
                            PasswordSalt = new byte[] { 248, 92, 89, 70, 88, 120, 247, 63, 15, 197, 249, 240, 95, 244, 0, 180, 186, 247, 59, 124, 61, 248, 20, 221, 199, 150, 143, 159, 5, 98, 131, 210, 106, 169, 243, 82, 33, 44, 41, 13, 95, 73, 170, 159, 249, 222, 135, 30, 239, 49, 39, 50, 229, 212, 176, 254, 92, 237, 28, 16, 125, 181, 170, 138, 155, 199, 80, 170, 31, 8, 66, 82, 249, 16, 60, 70, 111, 105, 66, 11, 39, 250, 226, 105, 171, 186, 103, 96, 105, 51, 233, 201, 254, 200, 177, 13, 192, 189, 139, 9, 112, 108, 255, 153, 191, 46, 203, 192, 199, 162, 185, 201, 3, 159, 255, 111, 42, 47, 105, 25, 251, 251, 126, 198, 24, 30, 92, 102 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("708dc5ee-0abe-4f3b-842a-6c2f1930e0d9"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 99, 85, 182, 221, 223, 3, 218, 244, 18, 157, 31, 68, 194, 66, 154, 218, 235, 223, 139, 80, 38, 119, 185, 153, 235, 225, 106, 0, 243, 204, 89, 200, 180, 138, 143, 148, 32, 217, 67, 254, 144, 46, 243, 36, 13, 183, 62, 84, 112, 125, 90, 55, 132, 73, 164, 109, 206, 187, 93, 0, 152, 56, 202, 162 },
                            PasswordSalt = new byte[] { 220, 58, 109, 77, 194, 22, 14, 206, 161, 170, 128, 75, 206, 191, 35, 212, 35, 17, 128, 143, 185, 111, 216, 66, 205, 143, 3, 120, 203, 198, 90, 30, 24, 120, 30, 18, 40, 194, 32, 168, 190, 106, 11, 114, 68, 236, 238, 65, 193, 79, 217, 99, 161, 218, 116, 114, 101, 202, 76, 107, 10, 85, 184, 85, 50, 154, 116, 138, 118, 167, 93, 178, 36, 228, 9, 208, 32, 254, 38, 115, 59, 198, 155, 247, 221, 32, 198, 198, 92, 51, 61, 216, 183, 135, 85, 205, 46, 24, 38, 125, 13, 143, 101, 197, 190, 109, 33, 110, 125, 102, 237, 74, 93, 163, 145, 112, 155, 154, 134, 42, 65, 188, 3, 250, 201, 147, 233, 8 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2cc61ea2-26b8-44c6-98fd-ceaa04b60b69"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 155, 245, 40, 206, 168, 20, 236, 118, 36, 27, 255, 224, 152, 49, 103, 27, 169, 47, 235, 123, 226, 100, 25, 113, 53, 188, 28, 62, 184, 35, 196, 127, 180, 195, 61, 173, 221, 255, 227, 46, 188, 105, 2, 210, 104, 119, 79, 251, 252, 166, 42, 65, 83, 81, 34, 171, 68, 135, 109, 59, 193, 57, 27, 136 },
                            PasswordSalt = new byte[] { 224, 147, 237, 149, 75, 233, 31, 65, 119, 151, 79, 107, 7, 30, 3, 185, 132, 245, 137, 163, 152, 225, 52, 158, 13, 75, 31, 48, 173, 136, 195, 23, 25, 16, 226, 27, 90, 102, 32, 241, 119, 203, 57, 148, 0, 112, 82, 231, 227, 76, 114, 66, 126, 53, 81, 194, 22, 132, 195, 64, 173, 142, 210, 5, 159, 48, 220, 166, 112, 228, 167, 95, 131, 233, 84, 166, 95, 75, 148, 36, 183, 189, 183, 8, 90, 68, 242, 101, 178, 235, 33, 109, 117, 46, 96, 60, 147, 62, 192, 202, 108, 211, 175, 12, 30, 230, 184, 215, 105, 228, 220, 156, 124, 149, 189, 82, 85, 114, 205, 196, 61, 99, 59, 9, 108, 174, 217, 62 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("730f97d4-6615-4b77-a824-024747014acc"),
                            SubjectNameApiTable = "История России",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("78932038-f1cd-4f2f-bd89-c04242083be6"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("2f5e9de1-5d63-4d6b-ae34-bef2da940220"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("f7bb641d-7553-4bae-bd7a-5fde0b3bc76b"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("01e2c4ab-122e-4833-b5b3-d2c049bc89c2"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("a0176ad7-b1cc-42de-bacf-518da2780b7f"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("d0c381bc-e011-4d95-b55d-35e5d4f4a9b7"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("ee867d47-389a-4e40-a1ee-70d92895c434"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("220b08d3-1b34-4537-a5a1-eb350d57339a"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("f36534a7-4ef2-47c4-bf66-5ea6b08176bc"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("d6a31898-e4db-48cd-931d-e067d1cbac7e"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("d1ef0e71-2302-4b22-b9ad-dc6de22f94db"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("1975ff47-1e8d-4d84-ac03-3fc3ba261ca6"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("79097678-fc47-4a6b-bf04-10978c6581ae"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = 'c8720f64-b4de-41a5-a621-66a78645bdbb'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("0b595b0f-948d-4f48-b664-e5c944eb0764"),
                            UserId = new Guid("9699fccd-e0f6-41d4-a8a2-3b03e5591192")
                        },
                        new
                        {
                            RoleId = new Guid("c8720f64-b4de-41a5-a621-66a78645bdbb"),
                            UserId = new Guid("dbe9aa58-c3f9-4ee2-99b3-53a725685db6")
                        },
                        new
                        {
                            RoleId = new Guid("d6b3cac4-eb6e-49e7-a61f-68e2a539c148"),
                            UserId = new Guid("708dc5ee-0abe-4f3b-842a-6c2f1930e0d9")
                        },
                        new
                        {
                            RoleId = new Guid("d6b3cac4-eb6e-49e7-a61f-68e2a539c148"),
                            UserId = new Guid("2cc61ea2-26b8-44c6-98fd-ceaa04b60b69")
                        },
                        new
                        {
                            RoleId = new Guid("0b595b0f-948d-4f48-b664-e5c944eb0764"),
                            UserId = new Guid("2cc61ea2-26b8-44c6-98fd-ceaa04b60b69")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Profiles", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("TeacherProfile_Name");
                        });

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
