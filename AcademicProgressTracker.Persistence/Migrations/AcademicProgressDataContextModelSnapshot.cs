// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    partial class AcademicProgressDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateTimeOfLastIncreaseCourse")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTimeOfUpdateDependenciesFromServer")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RealStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55b4908b-4bb2-460f-b645-efa6fba0815b"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("c35c64b7-9ac5-4fc9-a7a1-ba5f24f6ae2a"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("505309d2-e74e-4a77-b2a0-1f6fbc3d6700"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59684331-b833-4f00-b058-6a38986d2d73"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 186, 19, 35, 224, 107, 158, 159, 66, 72, 41, 221, 238, 234, 63, 35, 211, 91, 196, 102, 57, 112, 96, 240, 30, 80, 223, 65, 180, 209, 63, 119, 221, 32, 223, 130, 58, 7, 5, 62, 82, 121, 134, 114, 240, 77, 202, 80, 4, 156, 122, 3, 167, 178, 32, 185, 203, 81, 51, 99, 25, 81, 114, 220, 27 },
                            PasswordSalt = new byte[] { 97, 114, 19, 0, 93, 218, 231, 201, 52, 171, 152, 83, 45, 220, 129, 215, 209, 153, 26, 230, 100, 16, 6, 62, 188, 12, 255, 248, 202, 53, 172, 219, 242, 248, 53, 32, 143, 194, 60, 247, 234, 228, 191, 80, 54, 90, 157, 146, 210, 215, 249, 66, 32, 112, 253, 81, 119, 13, 178, 255, 165, 46, 63, 185, 98, 60, 237, 26, 204, 166, 134, 216, 62, 65, 126, 224, 248, 162, 110, 8, 103, 131, 227, 243, 222, 189, 26, 177, 93, 129, 232, 70, 192, 98, 177, 156, 162, 240, 228, 151, 100, 230, 8, 56, 238, 239, 185, 4, 235, 120, 19, 59, 67, 114, 173, 40, 22, 53, 241, 209, 8, 42, 68, 240, 79, 169, 15, 102 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a455c232-bb52-4ce0-b3d2-b592be78282a"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 7, 248, 231, 129, 243, 219, 64, 98, 255, 93, 195, 71, 22, 46, 81, 86, 73, 84, 26, 172, 182, 27, 137, 154, 48, 202, 247, 43, 18, 69, 68, 213, 5, 60, 44, 160, 211, 108, 183, 2, 205, 86, 132, 20, 22, 106, 211, 224, 241, 170, 80, 157, 11, 154, 95, 134, 137, 178, 41, 67, 205, 187, 86, 18 },
                            PasswordSalt = new byte[] { 66, 31, 193, 116, 191, 59, 109, 178, 86, 107, 11, 101, 101, 172, 83, 48, 189, 65, 180, 51, 0, 214, 69, 109, 205, 166, 108, 114, 215, 218, 232, 188, 9, 44, 44, 139, 228, 119, 96, 170, 35, 233, 214, 97, 58, 103, 233, 245, 186, 210, 32, 172, 202, 36, 69, 253, 162, 60, 129, 230, 187, 160, 53, 56, 76, 51, 176, 195, 210, 193, 169, 87, 218, 141, 90, 181, 65, 250, 60, 232, 52, 54, 227, 97, 212, 7, 12, 193, 164, 252, 197, 211, 186, 100, 238, 13, 165, 68, 250, 109, 54, 205, 75, 168, 225, 100, 177, 11, 198, 213, 103, 88, 138, 58, 4, 23, 32, 72, 246, 218, 140, 206, 117, 105, 26, 59, 99, 4 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4bc66476-129f-4273-81bc-b8a1decd026d"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 137, 12, 152, 97, 117, 114, 126, 14, 154, 91, 245, 105, 114, 2, 66, 157, 157, 252, 150, 31, 111, 10, 119, 69, 172, 254, 116, 80, 6, 179, 46, 191, 225, 121, 95, 111, 252, 211, 23, 220, 187, 94, 11, 163, 47, 219, 152, 21, 34, 109, 91, 217, 76, 126, 209, 81, 242, 164, 35, 3, 14, 207, 105, 143 },
                            PasswordSalt = new byte[] { 129, 59, 19, 25, 149, 54, 232, 178, 117, 248, 9, 237, 14, 155, 143, 42, 223, 221, 5, 58, 237, 9, 151, 235, 159, 161, 103, 198, 253, 109, 219, 85, 250, 22, 200, 173, 96, 165, 97, 198, 144, 245, 59, 179, 60, 117, 93, 66, 138, 69, 38, 96, 71, 246, 17, 160, 4, 240, 60, 126, 19, 142, 38, 242, 39, 253, 117, 237, 187, 195, 14, 149, 248, 204, 225, 7, 98, 250, 113, 64, 40, 153, 100, 184, 176, 202, 100, 113, 158, 100, 151, 88, 21, 38, 26, 128, 248, 237, 83, 29, 41, 35, 217, 211, 200, 235, 100, 4, 104, 234, 137, 58, 220, 180, 27, 132, 27, 68, 0, 41, 39, 208, 10, 51, 42, 10, 127, 189 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a025a76d-9ed5-403a-b182-6c34173693a6"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 255, 55, 157, 178, 245, 154, 199, 97, 23, 139, 118, 17, 217, 75, 67, 80, 28, 134, 195, 15, 8, 92, 195, 168, 1, 14, 210, 20, 91, 234, 5, 177, 87, 17, 233, 163, 231, 240, 1, 151, 3, 28, 197, 123, 118, 80, 155, 236, 120, 87, 51, 48, 217, 207, 190, 114, 219, 39, 34, 138, 230, 220, 75, 181 },
                            PasswordSalt = new byte[] { 210, 172, 215, 36, 79, 45, 193, 60, 174, 22, 66, 71, 90, 66, 113, 77, 80, 60, 189, 239, 196, 120, 121, 230, 84, 46, 91, 99, 76, 255, 144, 161, 26, 135, 48, 254, 193, 251, 111, 244, 208, 33, 71, 222, 31, 130, 170, 109, 175, 210, 244, 91, 38, 116, 242, 33, 28, 195, 87, 156, 234, 36, 82, 219, 197, 137, 66, 40, 89, 56, 155, 184, 28, 118, 126, 86, 96, 46, 17, 177, 142, 76, 248, 3, 156, 136, 207, 49, 103, 74, 76, 107, 208, 4, 205, 175, 247, 21, 46, 215, 35, 220, 93, 82, 249, 132, 241, 53, 106, 223, 135, 108, 151, 97, 108, 83, 171, 123, 12, 35, 235, 73, 130, 129, 234, 249, 40, 131 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8c54c05-ddfd-4bfa-80d1-8ca2f8962f7a"),
                            SubjectNameApiTable = "История России",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("a9271e16-9285-4f1c-a9bc-493999c2e660"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("a6d51b64-3242-4115-992e-98948f466f27"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("7edb0e3f-7da6-46b5-8e63-2302d551e03d"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("0ed3ba27-ffbc-46bd-b443-0ba98af03de3"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("1f9e0807-0753-4812-b283-ad8af52ab159"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("103b5d81-e21a-4ce9-a12b-bc476f84fa06"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("68fbd13b-d2a1-4393-aa4c-5755977b932a"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("f8d9f6dc-f48a-456e-8969-09a183ebb76b"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("b51bf198-d2cf-43a7-86aa-44fa99df0b69"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("57e3220c-a06d-48aa-94d4-4034bceed9c3"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("eaaa3b24-98df-43f8-a9ba-8f1e76bd6f19"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("4068e427-b8a7-41f7-a509-6687961ef1b8"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("e469f65f-5b48-48eb-a73f-766897e66b87"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '55b4908b-4bb2-460f-b645-efa6fba0815b'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("505309d2-e74e-4a77-b2a0-1f6fbc3d6700"),
                            UserId = new Guid("59684331-b833-4f00-b058-6a38986d2d73")
                        },
                        new
                        {
                            RoleId = new Guid("55b4908b-4bb2-460f-b645-efa6fba0815b"),
                            UserId = new Guid("a455c232-bb52-4ce0-b3d2-b592be78282a")
                        },
                        new
                        {
                            RoleId = new Guid("c35c64b7-9ac5-4fc9-a7a1-ba5f24f6ae2a"),
                            UserId = new Guid("4bc66476-129f-4273-81bc-b8a1decd026d")
                        },
                        new
                        {
                            RoleId = new Guid("c35c64b7-9ac5-4fc9-a7a1-ba5f24f6ae2a"),
                            UserId = new Guid("a025a76d-9ed5-403a-b182-6c34173693a6")
                        },
                        new
                        {
                            RoleId = new Guid("505309d2-e74e-4a77-b2a0-1f6fbc3d6700"),
                            UserId = new Guid("a025a76d-9ed5-403a-b182-6c34173693a6")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
