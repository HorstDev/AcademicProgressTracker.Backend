// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    partial class AcademicProgressDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateTimeOfUpdateDependenciesFromServer")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RealStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f029790e-8079-4017-8959-a3bd5143e96b"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("2eca9b89-72c7-4f0c-bf54-3be6f606d4b5"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("95835205-2a05-4823-89ab-ce56fe606397"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9477d9c-d201-47f0-8f21-368bea39a3ac"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 189, 246, 206, 202, 135, 116, 127, 161, 185, 89, 29, 41, 198, 241, 220, 245, 99, 57, 19, 31, 95, 205, 215, 247, 41, 11, 45, 5, 95, 172, 39, 46, 222, 118, 86, 89, 127, 157, 134, 193, 44, 235, 178, 153, 173, 9, 95, 124, 43, 219, 4, 68, 14, 134, 93, 62, 147, 101, 13, 192, 236, 94, 228, 201 },
                            PasswordSalt = new byte[] { 140, 124, 204, 15, 88, 215, 64, 5, 119, 84, 79, 26, 175, 62, 72, 230, 91, 197, 250, 255, 207, 98, 244, 133, 132, 210, 112, 122, 163, 116, 111, 82, 195, 202, 28, 215, 37, 59, 229, 162, 32, 63, 162, 97, 5, 174, 133, 252, 29, 232, 157, 151, 153, 170, 124, 9, 171, 106, 161, 238, 21, 66, 126, 148, 5, 189, 248, 164, 237, 56, 30, 93, 187, 35, 25, 157, 50, 81, 253, 18, 11, 97, 200, 218, 165, 212, 235, 191, 157, 29, 152, 36, 72, 59, 79, 191, 131, 106, 102, 64, 146, 192, 92, 231, 136, 235, 47, 47, 181, 42, 133, 247, 202, 77, 89, 7, 54, 234, 61, 15, 110, 101, 195, 208, 69, 165, 67, 80 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("534fc0c5-fb7c-4c01-89c1-cb43e3b77999"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 125, 10, 84, 178, 131, 12, 176, 201, 215, 199, 206, 205, 78, 165, 178, 62, 143, 36, 139, 224, 31, 74, 219, 222, 234, 0, 86, 11, 224, 176, 100, 108, 63, 35, 7, 8, 102, 8, 248, 15, 83, 139, 66, 245, 41, 72, 93, 250, 240, 236, 7, 108, 157, 157, 242, 110, 37, 151, 237, 143, 155, 55, 116, 176 },
                            PasswordSalt = new byte[] { 151, 164, 21, 222, 2, 39, 70, 210, 124, 121, 49, 129, 253, 189, 9, 217, 73, 102, 25, 176, 197, 72, 1, 0, 197, 176, 183, 84, 193, 186, 178, 134, 234, 136, 194, 214, 9, 188, 254, 238, 214, 201, 31, 207, 140, 255, 24, 198, 59, 38, 88, 217, 213, 107, 136, 191, 158, 79, 24, 65, 142, 47, 63, 19, 138, 40, 90, 120, 191, 146, 24, 52, 235, 168, 113, 197, 175, 84, 224, 111, 207, 100, 1, 190, 134, 110, 46, 186, 46, 136, 38, 93, 205, 90, 8, 250, 220, 148, 116, 2, 166, 12, 3, 174, 194, 200, 166, 39, 47, 13, 141, 191, 97, 106, 174, 135, 234, 69, 197, 57, 52, 198, 213, 114, 155, 164, 243, 249 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fff3585e-9bfc-478c-8b64-a878a83a432e"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 227, 3, 217, 149, 209, 196, 114, 254, 174, 179, 201, 92, 125, 117, 101, 33, 192, 44, 232, 17, 110, 207, 221, 221, 226, 247, 42, 21, 14, 135, 174, 37, 45, 193, 70, 165, 174, 63, 6, 227, 253, 246, 202, 23, 20, 76, 112, 197, 182, 187, 142, 40, 63, 108, 220, 29, 109, 173, 31, 97, 157, 190, 168, 50 },
                            PasswordSalt = new byte[] { 144, 150, 95, 53, 126, 226, 112, 248, 119, 2, 66, 7, 251, 138, 216, 55, 156, 186, 177, 82, 185, 123, 187, 114, 2, 243, 60, 91, 27, 197, 61, 59, 248, 0, 250, 18, 75, 119, 168, 241, 230, 9, 112, 117, 22, 42, 5, 36, 181, 218, 155, 27, 35, 246, 194, 185, 147, 138, 140, 106, 98, 177, 47, 137, 167, 144, 137, 108, 165, 28, 254, 73, 221, 141, 48, 248, 195, 38, 146, 178, 82, 13, 224, 64, 7, 5, 31, 116, 156, 73, 60, 123, 204, 46, 74, 252, 32, 88, 182, 226, 107, 115, 56, 74, 82, 72, 151, 25, 140, 81, 230, 68, 202, 187, 229, 136, 71, 189, 38, 184, 103, 221, 173, 199, 24, 27, 177, 182 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3ce30122-94db-4de5-9111-1019301d3747"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 114, 115, 209, 238, 206, 93, 227, 132, 169, 23, 12, 234, 203, 232, 121, 218, 159, 168, 39, 245, 107, 255, 116, 231, 136, 41, 72, 191, 105, 163, 113, 45, 59, 46, 102, 128, 45, 57, 221, 112, 80, 92, 132, 105, 210, 179, 134, 187, 121, 103, 237, 163, 123, 177, 186, 118, 27, 129, 126, 164, 67, 168, 117, 230 },
                            PasswordSalt = new byte[] { 192, 123, 44, 119, 109, 68, 44, 231, 106, 54, 80, 113, 71, 193, 15, 145, 79, 122, 39, 132, 27, 234, 64, 9, 243, 216, 133, 180, 78, 59, 17, 118, 254, 213, 208, 25, 128, 133, 6, 168, 219, 114, 102, 185, 205, 115, 91, 177, 59, 225, 126, 243, 195, 247, 133, 225, 108, 159, 14, 74, 135, 62, 106, 49, 58, 83, 183, 65, 160, 138, 9, 167, 184, 70, 30, 155, 12, 58, 44, 49, 78, 174, 53, 114, 217, 75, 11, 105, 66, 138, 13, 173, 54, 129, 73, 89, 254, 205, 4, 189, 214, 137, 28, 9, 217, 232, 25, 241, 77, 109, 64, 168, 110, 66, 161, 252, 247, 168, 224, 199, 160, 98, 215, 252, 64, 214, 60, 132 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("862cbd63-26ba-4ebd-86e1-51303d3e2354"),
                            SubjectNameApiTable = "История России",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("681f9498-c272-4d81-b661-b94d7791b698"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("3564ddb6-379b-44ba-baf4-dcbb730dc363"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("01a4f2b7-7301-43ee-a620-aeec774aa97c"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("e40b0eca-f998-4efa-abbc-449244684012"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("7aa17f4f-2316-459c-b81b-4b4567f4d86c"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("554d8d87-7d2e-4761-80d1-3aad9db448b3"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("2c7288c9-5bd1-4073-ad74-74ff7f9d4156"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("7e60289f-7d88-46e7-a91a-77e2589f26ac"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("c2c55f00-500d-48f0-af23-fa3164a9e5f1"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("8abdfd98-04cb-4aa1-9a82-9e1676d3e5f3"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("5d0f153f-cc39-4058-916a-b91aa6909967"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("997127ed-a6b8-476f-90e0-5cab4f2ce81f"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("c2406abc-ee14-4acd-8cde-abde3e79e9fe"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = 'f029790e-8079-4017-8959-a3bd5143e96b'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("95835205-2a05-4823-89ab-ce56fe606397"),
                            UserId = new Guid("b9477d9c-d201-47f0-8f21-368bea39a3ac")
                        },
                        new
                        {
                            RoleId = new Guid("f029790e-8079-4017-8959-a3bd5143e96b"),
                            UserId = new Guid("534fc0c5-fb7c-4c01-89c1-cb43e3b77999")
                        },
                        new
                        {
                            RoleId = new Guid("2eca9b89-72c7-4f0c-bf54-3be6f606d4b5"),
                            UserId = new Guid("fff3585e-9bfc-478c-8b64-a878a83a432e")
                        },
                        new
                        {
                            RoleId = new Guid("2eca9b89-72c7-4f0c-bf54-3be6f606d4b5"),
                            UserId = new Guid("3ce30122-94db-4de5-9111-1019301d3747")
                        },
                        new
                        {
                            RoleId = new Guid("95835205-2a05-4823-89ab-ce56fe606397"),
                            UserId = new Guid("3ce30122-94db-4de5-9111-1019301d3747")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Profiles", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("TeacherProfile_Name");
                        });

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
