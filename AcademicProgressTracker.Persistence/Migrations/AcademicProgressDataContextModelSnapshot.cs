// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    partial class AcademicProgressDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DateTimeOfLastIncreaseCourse")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTimeOfUpdateDependenciesFromServer")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RealStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02a6d8a0-4c58-4d3d-84c6-46a8e2ee86f0"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("0349835f-2688-4a03-b65e-d750d3bbfa65"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("9fd61bdb-6405-433f-b343-1c85a2df763b"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5ee4cc9-cecf-43d9-9c38-3c5684374580"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 13, 157, 58, 111, 136, 218, 60, 114, 197, 35, 248, 128, 151, 230, 123, 207, 132, 38, 138, 191, 40, 163, 200, 251, 3, 123, 115, 239, 216, 253, 252, 117, 194, 40, 35, 151, 55, 147, 254, 212, 236, 128, 216, 85, 22, 25, 131, 28, 225, 141, 146, 110, 235, 8, 121, 223, 233, 111, 134, 203, 213, 90, 204, 250 },
                            PasswordSalt = new byte[] { 99, 98, 21, 54, 174, 0, 140, 122, 84, 85, 111, 9, 197, 20, 119, 131, 41, 190, 197, 72, 126, 17, 236, 33, 44, 251, 177, 179, 50, 21, 237, 48, 66, 148, 40, 39, 76, 144, 1, 211, 249, 132, 44, 86, 54, 10, 2, 152, 80, 56, 86, 215, 217, 142, 26, 182, 244, 39, 171, 43, 142, 254, 56, 62, 247, 226, 9, 42, 217, 44, 119, 103, 148, 8, 228, 176, 81, 237, 130, 24, 199, 60, 30, 172, 15, 77, 192, 237, 66, 20, 123, 56, 99, 198, 204, 77, 76, 33, 97, 207, 49, 66, 45, 118, 31, 72, 41, 102, 156, 28, 81, 56, 191, 29, 147, 203, 112, 172, 48, 137, 244, 156, 111, 8, 174, 16, 196, 37 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("180a99e1-9beb-46ce-9ac8-c155973df887"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 145, 191, 146, 76, 177, 253, 157, 135, 206, 168, 116, 108, 195, 130, 120, 181, 171, 102, 8, 62, 90, 191, 170, 106, 51, 196, 93, 81, 90, 139, 131, 63, 134, 115, 142, 179, 231, 163, 44, 116, 120, 251, 251, 244, 11, 130, 128, 224, 66, 124, 12, 182, 204, 44, 215, 182, 60, 163, 37, 203, 167, 160, 121, 238 },
                            PasswordSalt = new byte[] { 130, 94, 144, 7, 182, 166, 122, 41, 217, 38, 72, 175, 2, 153, 68, 42, 207, 192, 79, 241, 222, 124, 147, 226, 47, 71, 8, 12, 242, 203, 231, 126, 214, 48, 33, 103, 162, 41, 28, 37, 64, 193, 250, 100, 49, 158, 3, 148, 219, 154, 10, 63, 136, 247, 91, 150, 251, 21, 80, 183, 104, 223, 29, 4, 146, 28, 177, 39, 197, 88, 128, 241, 71, 152, 45, 10, 184, 209, 170, 199, 195, 253, 161, 111, 161, 14, 108, 211, 161, 219, 27, 7, 96, 41, 107, 90, 207, 161, 218, 76, 34, 218, 144, 253, 200, 65, 186, 73, 251, 153, 4, 210, 95, 182, 198, 10, 75, 156, 196, 1, 150, 145, 152, 166, 176, 1, 254, 139 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("587b4db9-4997-42a3-9040-394f2edab617"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 232, 126, 132, 118, 224, 2, 83, 93, 39, 171, 124, 43, 97, 131, 110, 134, 28, 205, 38, 180, 83, 61, 232, 63, 128, 118, 154, 69, 243, 88, 173, 95, 219, 30, 11, 66, 108, 210, 248, 155, 170, 208, 0, 203, 245, 182, 255, 102, 210, 243, 170, 150, 221, 10, 25, 250, 223, 135, 77, 169, 176, 227, 92, 40 },
                            PasswordSalt = new byte[] { 223, 239, 113, 200, 110, 61, 159, 214, 32, 121, 146, 83, 130, 96, 60, 47, 189, 242, 28, 15, 219, 47, 124, 226, 68, 218, 170, 95, 152, 155, 123, 127, 106, 9, 254, 201, 7, 150, 5, 2, 227, 196, 81, 194, 90, 205, 38, 250, 227, 220, 65, 206, 141, 246, 117, 128, 183, 196, 124, 90, 203, 177, 37, 67, 140, 23, 97, 241, 239, 44, 163, 227, 32, 36, 74, 118, 6, 203, 161, 88, 135, 229, 88, 2, 213, 175, 117, 33, 81, 160, 19, 194, 69, 175, 200, 150, 65, 43, 40, 56, 192, 166, 15, 7, 153, 32, 137, 230, 105, 230, 158, 150, 54, 61, 126, 19, 171, 180, 193, 96, 212, 67, 218, 219, 201, 96, 91, 255 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1fd514f3-be8f-40d6-a97d-7968bc3c1cf0"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 212, 169, 102, 26, 102, 103, 154, 40, 167, 16, 114, 196, 193, 175, 164, 121, 198, 139, 243, 156, 72, 71, 66, 157, 4, 14, 205, 104, 57, 232, 142, 15, 102, 138, 134, 192, 76, 11, 153, 122, 222, 112, 48, 78, 250, 227, 233, 79, 173, 181, 89, 173, 251, 182, 8, 146, 101, 58, 138, 203, 132, 113, 137, 212 },
                            PasswordSalt = new byte[] { 153, 30, 178, 213, 242, 46, 160, 104, 56, 176, 90, 28, 158, 132, 79, 77, 44, 22, 119, 127, 230, 148, 250, 7, 179, 95, 194, 152, 101, 189, 108, 19, 213, 156, 137, 131, 125, 251, 50, 59, 29, 143, 119, 8, 175, 161, 109, 232, 137, 62, 240, 118, 70, 188, 10, 51, 213, 80, 166, 100, 239, 186, 249, 183, 198, 94, 27, 68, 219, 111, 41, 144, 220, 25, 190, 6, 147, 59, 90, 196, 91, 95, 183, 189, 137, 161, 211, 109, 199, 250, 177, 44, 121, 232, 156, 20, 216, 43, 182, 73, 33, 130, 180, 178, 130, 245, 247, 236, 241, 210, 77, 163, 158, 236, 168, 243, 135, 199, 199, 11, 81, 253, 219, 5, 0, 145, 116, 182 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50231d4f-1c34-4eb0-90ae-69bd14ec17dd"),
                            SubjectNameApiTable = "История России",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("1fb63a85-9311-4306-94f5-57eb4a86f7ca"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("b9de0bf4-8d44-4bc1-b0f9-9113397a0a6a"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("3d15e34e-dcb3-46e1-884e-c1bcbcdb3d05"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("4a302070-bc82-4c03-87f9-700265d22eda"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("a00d96f2-2fce-4361-beaa-fb8bc39894f6"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("42936028-1ff7-4f9a-8207-be8b1a38fa6a"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("2889cb9b-ffad-41d1-b33d-cd40c684e462"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("a6805b38-2f9f-4c06-8aff-282b354756a0"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("3d03ca51-245f-411e-b853-b189e15d5d63"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("94f59285-1c79-48f8-904d-45f5be7d1a77"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("d782480c-9316-49d0-ab5a-9c62172d6ac4"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("69f31a74-0dca-4889-9a81-714c021ebd82"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("704e80f7-85a1-4ef6-b5a0-435ea0ad8a16"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '02a6d8a0-4c58-4d3d-84c6-46a8e2ee86f0'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("9fd61bdb-6405-433f-b343-1c85a2df763b"),
                            UserId = new Guid("f5ee4cc9-cecf-43d9-9c38-3c5684374580")
                        },
                        new
                        {
                            RoleId = new Guid("02a6d8a0-4c58-4d3d-84c6-46a8e2ee86f0"),
                            UserId = new Guid("180a99e1-9beb-46ce-9ac8-c155973df887")
                        },
                        new
                        {
                            RoleId = new Guid("0349835f-2688-4a03-b65e-d750d3bbfa65"),
                            UserId = new Guid("587b4db9-4997-42a3-9040-394f2edab617")
                        },
                        new
                        {
                            RoleId = new Guid("0349835f-2688-4a03-b65e-d750d3bbfa65"),
                            UserId = new Guid("1fd514f3-be8f-40d6-a97d-7968bc3c1cf0")
                        },
                        new
                        {
                            RoleId = new Guid("9fd61bdb-6405-433f-b343-1c85a2df763b"),
                            UserId = new Guid("1fd514f3-be8f-40d6-a97d-7968bc3c1cf0")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
