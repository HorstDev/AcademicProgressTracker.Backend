// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    [Migration("20240318102530_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("007d022d-bb70-41b5-8dc7-a3ef604b32ff"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("2704061f-3dcb-49e2-9c50-f4f2d2c4bb5c"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("3d263beb-0f41-4cc0-83a4-fc7c9390544c"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b9e72e4-d00f-4fe3-acec-36e970b1bb2b"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 166, 252, 20, 131, 247, 251, 165, 205, 25, 83, 207, 39, 117, 223, 249, 27, 135, 133, 220, 128, 23, 58, 189, 78, 136, 210, 157, 108, 97, 100, 30, 161, 60, 97, 115, 90, 81, 96, 64, 216, 124, 190, 112, 208, 25, 21, 81, 71, 246, 12, 157, 198, 144, 41, 63, 17, 174, 130, 87, 232, 2, 34, 207, 100 },
                            PasswordSalt = new byte[] { 39, 118, 12, 157, 212, 204, 124, 127, 132, 93, 153, 136, 232, 63, 202, 123, 35, 19, 124, 223, 228, 145, 134, 151, 194, 109, 73, 61, 176, 187, 32, 28, 169, 92, 111, 27, 142, 48, 202, 143, 175, 17, 238, 15, 135, 249, 171, 161, 65, 170, 228, 49, 9, 156, 218, 244, 181, 185, 79, 227, 89, 51, 192, 11, 53, 16, 129, 48, 3, 43, 164, 160, 46, 210, 62, 231, 171, 27, 55, 32, 29, 224, 128, 30, 152, 74, 111, 134, 140, 2, 41, 52, 113, 76, 239, 149, 103, 206, 83, 69, 61, 76, 97, 147, 247, 77, 164, 29, 58, 90, 223, 197, 32, 9, 19, 203, 103, 104, 250, 23, 68, 45, 98, 1, 221, 251, 16, 184 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b93008fb-c219-4165-8ec8-fd9a02bbd700"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 110, 156, 93, 47, 0, 70, 149, 65, 96, 248, 4, 190, 137, 160, 196, 207, 180, 72, 154, 56, 185, 112, 40, 191, 35, 70, 254, 160, 220, 30, 10, 4, 195, 43, 177, 74, 52, 87, 225, 124, 229, 166, 79, 34, 176, 155, 208, 205, 173, 203, 78, 109, 247, 231, 15, 63, 156, 69, 178, 79, 216, 184, 7, 60 },
                            PasswordSalt = new byte[] { 171, 69, 186, 248, 139, 18, 175, 128, 222, 167, 14, 107, 3, 7, 125, 34, 181, 113, 169, 222, 107, 38, 198, 172, 82, 250, 4, 209, 61, 6, 158, 94, 102, 33, 111, 207, 117, 180, 18, 138, 57, 154, 150, 15, 153, 76, 182, 213, 169, 206, 255, 132, 148, 189, 66, 124, 199, 113, 188, 136, 83, 173, 204, 95, 61, 230, 123, 100, 188, 196, 41, 177, 125, 164, 25, 137, 179, 58, 137, 51, 115, 146, 40, 73, 223, 112, 53, 55, 64, 202, 103, 2, 210, 8, 62, 117, 56, 190, 61, 228, 40, 180, 203, 156, 52, 117, 48, 69, 45, 222, 113, 237, 34, 248, 13, 13, 112, 113, 178, 201, 249, 127, 127, 54, 244, 25, 9, 85 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7b1a64b3-b8c7-4c3b-a955-1444ae27f041"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 105, 157, 59, 95, 4, 91, 80, 252, 156, 42, 219, 213, 101, 252, 114, 227, 238, 17, 171, 143, 251, 163, 1, 89, 112, 231, 209, 169, 28, 57, 237, 102, 69, 185, 196, 182, 146, 10, 122, 134, 231, 201, 52, 74, 116, 196, 16, 216, 216, 153, 34, 16, 96, 22, 161, 229, 139, 171, 154, 52, 11, 178, 238, 198 },
                            PasswordSalt = new byte[] { 247, 180, 28, 160, 44, 214, 87, 246, 31, 191, 253, 201, 59, 169, 220, 94, 183, 45, 83, 191, 14, 180, 22, 13, 23, 48, 230, 228, 168, 79, 233, 246, 134, 96, 185, 224, 49, 57, 30, 170, 128, 166, 143, 167, 148, 95, 39, 2, 84, 83, 60, 249, 103, 96, 238, 146, 160, 145, 141, 47, 170, 23, 154, 35, 233, 101, 17, 154, 235, 249, 11, 29, 210, 30, 198, 249, 66, 35, 102, 79, 122, 78, 85, 19, 130, 79, 13, 27, 41, 172, 72, 221, 29, 42, 199, 48, 229, 52, 144, 66, 185, 43, 216, 171, 86, 253, 207, 21, 26, 95, 142, 132, 77, 105, 249, 161, 25, 99, 48, 101, 129, 198, 122, 231, 148, 181, 85, 47 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bc7a347d-b2c1-4051-9c91-c5d743d58b1e"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 18, 8, 241, 79, 59, 126, 149, 1, 219, 69, 4, 197, 15, 166, 238, 60, 250, 231, 225, 196, 37, 12, 145, 182, 36, 105, 134, 121, 137, 114, 119, 140, 152, 190, 50, 97, 143, 109, 179, 172, 240, 185, 18, 250, 123, 244, 103, 187, 88, 28, 174, 224, 77, 49, 36, 184, 4, 124, 186, 6, 91, 204, 110, 162 },
                            PasswordSalt = new byte[] { 237, 198, 78, 155, 102, 46, 51, 31, 103, 52, 185, 50, 12, 22, 74, 164, 207, 202, 25, 15, 100, 115, 242, 3, 172, 1, 86, 248, 11, 42, 238, 170, 124, 19, 118, 184, 139, 92, 238, 231, 45, 28, 67, 238, 102, 99, 45, 174, 0, 1, 73, 174, 164, 192, 167, 209, 235, 67, 177, 232, 3, 254, 208, 55, 99, 250, 59, 38, 70, 219, 80, 76, 243, 37, 119, 166, 130, 221, 227, 54, 82, 242, 47, 254, 246, 52, 166, 143, 103, 70, 5, 141, 169, 206, 87, 105, 70, 120, 149, 69, 12, 214, 10, 5, 234, 45, 51, 185, 66, 235, 30, 128, 233, 59, 182, 101, 147, 8, 167, 169, 215, 254, 187, 184, 34, 219, 112, 176 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c33d25d9-e18c-4c36-9d56-b16bdfa0cdd8"),
                            SubjectNameApiTable = "История россии",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("f17634b7-d6c0-4b73-944f-38edafd3706b"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("fed3fa08-d172-4814-a2c0-d1d14beff176"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("ef63ee51-eef4-4cef-8816-3b7806a1fcec"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("8dff8d62-6b75-4624-846a-52e92b63410d"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("c12b8075-f23e-4a6b-9a41-3bb234cc99e5"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("12109d3a-bafa-46e4-bbe7-b068507b71c4"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("7f94e467-fe73-4206-965b-a5bbb910ff36"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("71b84b42-b989-4b1b-9c4c-e53b3665d87e"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("351684ae-2d6e-4e8d-9f08-6e020aea6dd8"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("2a44eb2b-feef-4dd0-9631-5f8c84555103"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("6b235256-375f-4369-8658-aec13535dd08"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("fb699d5f-5e27-4a8e-aa5a-5551ee6d5df7"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("9473ecfa-82d0-49b9-bec0-54ad4ece2704"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '007d022d-bb70-41b5-8dc7-a3ef604b32ff'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("3d263beb-0f41-4cc0-83a4-fc7c9390544c"),
                            UserId = new Guid("1b9e72e4-d00f-4fe3-acec-36e970b1bb2b")
                        },
                        new
                        {
                            RoleId = new Guid("007d022d-bb70-41b5-8dc7-a3ef604b32ff"),
                            UserId = new Guid("b93008fb-c219-4165-8ec8-fd9a02bbd700")
                        },
                        new
                        {
                            RoleId = new Guid("2704061f-3dcb-49e2-9c50-f4f2d2c4bb5c"),
                            UserId = new Guid("7b1a64b3-b8c7-4c3b-a955-1444ae27f041")
                        },
                        new
                        {
                            RoleId = new Guid("2704061f-3dcb-49e2-9c50-f4f2d2c4bb5c"),
                            UserId = new Guid("bc7a347d-b2c1-4051-9c91-c5d743d58b1e")
                        },
                        new
                        {
                            RoleId = new Guid("3d263beb-0f41-4cc0-83a4-fc7c9390544c"),
                            UserId = new Guid("bc7a347d-b2c1-4051-9c91-c5d743d58b1e")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Profiles", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("TeacherProfile_Name");
                        });

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
