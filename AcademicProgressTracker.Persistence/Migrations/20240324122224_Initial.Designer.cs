// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    [Migration("20240324122224_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("LabWorks");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RealEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("RealStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lesson");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonUserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Profile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da687bc4-c3ea-4a90-bfb2-aa5074f80b3e"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("95759739-3e09-4cbc-b09c-35bdb61e4176"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("fc80a892-0a04-42d0-bb53-170e294e494c"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1808c3ab-5740-4211-ad69-423e63ef4610"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 101, 2, 227, 54, 64, 155, 216, 88, 175, 128, 123, 224, 193, 177, 202, 199, 123, 64, 37, 114, 251, 209, 27, 237, 139, 153, 61, 75, 179, 152, 224, 134, 184, 86, 113, 54, 230, 190, 118, 165, 212, 136, 21, 5, 67, 199, 231, 169, 137, 131, 174, 70, 188, 189, 33, 98, 52, 171, 52, 221, 46, 37, 138, 121 },
                            PasswordSalt = new byte[] { 98, 109, 249, 58, 3, 175, 223, 100, 104, 155, 14, 170, 228, 164, 170, 5, 160, 70, 115, 150, 52, 223, 150, 76, 208, 89, 194, 85, 34, 1, 72, 230, 164, 57, 129, 141, 110, 170, 211, 219, 223, 229, 255, 79, 38, 158, 232, 193, 54, 73, 184, 47, 190, 206, 240, 95, 66, 167, 40, 126, 128, 72, 54, 202, 57, 162, 192, 103, 130, 17, 134, 155, 6, 64, 44, 148, 183, 164, 106, 80, 182, 72, 22, 130, 6, 202, 233, 138, 72, 96, 70, 30, 180, 223, 192, 132, 158, 24, 116, 224, 215, 233, 89, 29, 250, 208, 15, 178, 193, 61, 75, 144, 231, 86, 53, 142, 105, 116, 15, 30, 212, 193, 237, 121, 70, 9, 122, 243 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1e409d26-b75f-45c7-924f-da8037557142"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 67, 145, 96, 145, 36, 170, 139, 193, 1, 158, 206, 204, 121, 89, 177, 214, 2, 69, 248, 174, 110, 48, 86, 170, 58, 122, 30, 172, 148, 91, 103, 233, 168, 106, 165, 31, 231, 103, 78, 1, 171, 33, 12, 156, 143, 217, 165, 237, 117, 237, 13, 75, 46, 44, 171, 182, 246, 99, 64, 176, 73, 245, 37, 217 },
                            PasswordSalt = new byte[] { 74, 49, 19, 236, 199, 61, 6, 213, 142, 59, 207, 174, 228, 25, 175, 13, 248, 160, 136, 239, 129, 110, 211, 69, 2, 14, 180, 150, 40, 157, 19, 253, 145, 103, 147, 42, 182, 72, 126, 169, 232, 199, 34, 213, 89, 112, 126, 33, 183, 128, 251, 171, 52, 69, 72, 245, 44, 198, 77, 240, 119, 199, 248, 140, 206, 193, 106, 198, 180, 134, 233, 238, 140, 103, 185, 12, 117, 2, 39, 34, 125, 88, 184, 59, 10, 196, 221, 76, 190, 174, 26, 46, 180, 160, 229, 249, 140, 25, 8, 230, 193, 60, 57, 224, 71, 233, 155, 38, 58, 251, 24, 0, 250, 108, 131, 32, 154, 70, 250, 35, 127, 104, 148, 68, 63, 1, 112, 21 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("196c4816-f101-46cc-9de9-1e363fd3565e"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 43, 172, 15, 69, 49, 184, 80, 237, 32, 20, 49, 121, 101, 61, 227, 21, 69, 187, 85, 35, 187, 148, 239, 121, 6, 214, 236, 159, 148, 99, 61, 218, 134, 122, 253, 242, 119, 113, 18, 239, 251, 88, 41, 90, 180, 66, 161, 112, 235, 97, 71, 238, 66, 228, 198, 218, 212, 254, 143, 95, 235, 58, 176, 91 },
                            PasswordSalt = new byte[] { 254, 36, 183, 79, 109, 2, 145, 253, 142, 248, 53, 83, 32, 37, 241, 6, 65, 76, 36, 146, 30, 79, 250, 242, 113, 16, 182, 227, 181, 99, 126, 97, 96, 66, 44, 178, 223, 161, 14, 18, 63, 137, 51, 217, 202, 27, 32, 214, 243, 145, 81, 243, 174, 70, 255, 86, 208, 210, 131, 242, 37, 39, 143, 0, 51, 138, 17, 149, 236, 32, 26, 29, 236, 153, 183, 91, 22, 145, 126, 157, 60, 60, 47, 126, 133, 4, 108, 40, 239, 95, 28, 223, 109, 35, 215, 30, 72, 143, 206, 233, 186, 9, 231, 30, 208, 215, 232, 29, 3, 96, 31, 68, 151, 204, 8, 199, 177, 127, 172, 5, 27, 151, 116, 216, 129, 99, 238, 37 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d6dc0477-ae18-48ab-aee0-7adcd88b9f6d"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 225, 173, 80, 207, 148, 9, 200, 154, 51, 91, 224, 125, 15, 215, 112, 97, 35, 245, 144, 34, 58, 122, 158, 133, 21, 120, 88, 72, 110, 137, 83, 31, 34, 33, 170, 81, 49, 180, 137, 138, 210, 23, 51, 153, 72, 150, 140, 33, 111, 45, 150, 198, 125, 234, 5, 93, 156, 197, 159, 24, 3, 197, 226, 235 },
                            PasswordSalt = new byte[] { 233, 97, 25, 105, 78, 243, 216, 179, 221, 55, 127, 147, 1, 130, 39, 250, 5, 143, 44, 167, 235, 14, 98, 122, 37, 52, 68, 108, 74, 85, 179, 180, 51, 210, 250, 8, 155, 98, 189, 9, 247, 98, 96, 48, 92, 43, 250, 6, 238, 67, 183, 55, 113, 218, 16, 199, 175, 64, 181, 156, 214, 170, 113, 5, 143, 50, 142, 142, 26, 26, 131, 207, 101, 239, 143, 59, 149, 143, 120, 103, 202, 191, 8, 107, 156, 106, 89, 209, 64, 160, 205, 156, 68, 173, 161, 112, 90, 84, 18, 58, 126, 161, 140, 14, 60, 218, 176, 114, 191, 130, 241, 76, 159, 129, 68, 251, 103, 253, 71, 71, 219, 220, 197, 164, 16, 103, 115, 61 },
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d517279f-fa29-4dea-bcd6-1f9b5d81d161"),
                            SubjectNameApiTable = "История России",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("f973d8de-a84b-4e9a-b83f-35c2fb67aae5"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("571eb8fa-02a7-4065-93ae-6b27d933b53f"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("4cdb0bbf-2f9c-4b8a-90bf-4d51c0ff2bb0"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("301a6894-ac07-46d0-90f5-3fb8d08420b6"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("2fcf9e37-6db1-4d02-a719-14f6eb9ec93c"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("62462bac-728f-4296-9d8d-156a9e7f8841"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        },
                        new
                        {
                            Id = new Guid("777f018e-c613-4250-b065-f3e14c88f906"),
                            SubjectNameApiTable = "Проектирование человеко-машинного интерфейса",
                            SubjectNameCurriculum = "Проектирование человеко-машинного интерфейса"
                        },
                        new
                        {
                            Id = new Guid("41b0a3a7-6f9a-4633-bb6b-dfed51a69bfb"),
                            SubjectNameApiTable = "Разработка и анализ требований , конструирование программного обеспечения",
                            SubjectNameCurriculum = "Разработка и анализ требований, конструирование программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("f2cda0ca-65a5-455c-8d89-0732d2671b7f"),
                            SubjectNameApiTable = "Теория принятия решений",
                            SubjectNameCurriculum = "Теория принятия решений"
                        },
                        new
                        {
                            Id = new Guid("ca0afc01-d3ef-496c-b6a3-266acfa7df27"),
                            SubjectNameApiTable = "Разработка приложений asp.net",
                            SubjectNameCurriculum = "Разработка приложений ASP.NET"
                        },
                        new
                        {
                            Id = new Guid("da63d4bd-7693-4ca4-aea3-79e800f4ffc2"),
                            SubjectNameApiTable = "Субд postgresql",
                            SubjectNameCurriculum = "СУБД PostgreSQL"
                        },
                        new
                        {
                            Id = new Guid("3653b918-1bdb-4e37-899b-634791005a48"),
                            SubjectNameApiTable = "Элективные дисциплины по физической культуре и спорту",
                            SubjectNameCurriculum = "Элективные дисциплины по физической культуре и спорту"
                        },
                        new
                        {
                            Id = new Guid("ee85ddf9-a397-4d23-bb36-fbb2bf407307"),
                            SubjectNameApiTable = "Тестирование программного обеспечения",
                            SubjectNameCurriculum = "Тестирование программного обеспечения"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = 'da687bc4-c3ea-4a90-bfb2-aa5074f80b3e'");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("fc80a892-0a04-42d0-bb53-170e294e494c"),
                            UserId = new Guid("1808c3ab-5740-4211-ad69-423e63ef4610")
                        },
                        new
                        {
                            RoleId = new Guid("da687bc4-c3ea-4a90-bfb2-aa5074f80b3e"),
                            UserId = new Guid("1e409d26-b75f-45c7-924f-da8037557142")
                        },
                        new
                        {
                            RoleId = new Guid("95759739-3e09-4cbc-b09c-35bdb61e4176"),
                            UserId = new Guid("196c4816-f101-46cc-9de9-1e363fd3565e")
                        },
                        new
                        {
                            RoleId = new Guid("95759739-3e09-4cbc-b09c-35bdb61e4176"),
                            UserId = new Guid("d6dc0477-ae18-48ab-aee0-7adcd88b9f6d")
                        },
                        new
                        {
                            RoleId = new Guid("fc80a892-0a04-42d0-bb53-170e294e494c"),
                            UserId = new Guid("d6dc0477-ae18-48ab-aee0-7adcd88b9f6d")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.Property<Guid?>("LabWorkId")
                        .HasColumnType("uuid");

                    b.HasIndex("LabWorkId");

                    b.HasDiscriminator().HasValue("LabLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LectureLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("LectureLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.PracticeLesson", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Lesson");

                    b.HasDiscriminator().HasValue("PracticeLesson");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.StudentProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StudentProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.TeacherProfile", b =>
                {
                    b.HasBaseType("AcademicProgressTracker.Domain.Entities.Profile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Profiles", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("TeacherProfile_Name");
                        });

                    b.HasDiscriminator().HasValue("TeacherProfile");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LessonUserStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Lesson", "Lesson")
                        .WithMany("UserStatuses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany("Subjects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabLesson", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany("Lessons")
                        .HasForeignKey("LabWorkId");

                    b.Navigation("LabWork");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("UserStatuses");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Navigation("Profiles");
                });
#pragma warning restore 612, 618
        }
    }
}
