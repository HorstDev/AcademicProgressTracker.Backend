// <auto-generated />
using System;
using AcademicProgressTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcademicProgressTracker.Persistence.Migrations
{
    [DbContext(typeof(AcademicProgressDataContext))]
    [Migration("20240221120154_Mappings-for-subjects")]
    partial class Mappingsforsubjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<byte[]>("CurriculumExcelDocument")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearCreated")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbc8048f-26ed-4212-bc46-5ba3a438a0d3"),
                            Course = 4,
                            Name = "ДИПРБ",
                            YearCreated = 2020
                        },
                        new
                        {
                            Id = new Guid("0bbeed8f-6918-40c8-8910-809914dd61d2"),
                            Course = 4,
                            Name = "ДИИЭБ",
                            YearCreated = 2020
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("MaximumScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("LabWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("151c61f7-2264-4433-b4d9-ac66883c5423"),
                            MaximumScore = 10m,
                            Number = 1,
                            SubjectId = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1")
                        },
                        new
                        {
                            Id = new Guid("3ec4bf0d-0fc4-4e6c-9832-387793dd327b"),
                            MaximumScore = 10m,
                            Number = 2,
                            SubjectId = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1")
                        },
                        new
                        {
                            Id = new Guid("7a511da6-9b1b-4606-bc14-6a2689933298"),
                            MaximumScore = 10m,
                            Number = 3,
                            SubjectId = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1")
                        },
                        new
                        {
                            Id = new Guid("921c8603-1467-448c-97a5-ca318241761a"),
                            MaximumScore = 10m,
                            Number = 4,
                            SubjectId = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentScore")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LabWorkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("LabWorkStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00eec71d-6916-456c-ada8-a0455e6bdffd"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("151c61f7-2264-4433-b4d9-ac66883c5423"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        },
                        new
                        {
                            Id = new Guid("07af81f0-0b6c-4548-9c92-9d49a3c55f90"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("3ec4bf0d-0fc4-4e6c-9832-387793dd327b"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        },
                        new
                        {
                            Id = new Guid("4f8d787c-2a04-4df5-8d1a-47374f2b121a"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("7a511da6-9b1b-4606-bc14-6a2689933298"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        },
                        new
                        {
                            Id = new Guid("df94c98d-faea-452c-accb-afc9f4cc6e2d"),
                            CurrentScore = 0m,
                            IsCompleted = false,
                            LabWorkId = new Guid("921c8603-1467-448c-97a5-ca318241761a"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67ec963b-940a-48c0-9299-940f6738633c"),
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("f1a77887-ff0c-4b04-b19c-fa1e05746d96"),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("7fe77e53-3bcb-4df9-92ca-485784d828eb"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1"),
                            GroupId = new Guid("dbc8048f-26ed-4212-bc46-5ba3a438a0d3"),
                            Name = "СУБД PostgreSQL",
                            Semester = 0
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5db3e422-1cae-47a5-a705-7f95dc12366a"),
                            Email = "admin@mail.ru",
                            PasswordHash = new byte[] { 65, 144, 58, 107, 255, 241, 128, 7, 235, 127, 248, 127, 239, 212, 15, 115, 236, 225, 78, 120, 89, 28, 120, 205, 75, 116, 36, 183, 80, 145, 68, 87, 90, 89, 173, 92, 73, 137, 131, 228, 119, 63, 2, 69, 147, 251, 227, 23, 0, 130, 184, 193, 255, 77, 7, 107, 15, 67, 199, 193, 183, 176, 199, 135 },
                            PasswordSalt = new byte[] { 32, 61, 91, 251, 209, 76, 30, 78, 72, 213, 159, 191, 171, 47, 237, 103, 193, 198, 26, 228, 152, 195, 101, 167, 73, 33, 116, 126, 102, 193, 244, 186, 14, 185, 104, 99, 217, 39, 195, 29, 212, 227, 217, 4, 39, 13, 90, 210, 167, 0, 79, 179, 104, 127, 82, 32, 216, 77, 140, 171, 152, 119, 136, 228, 50, 103, 20, 180, 155, 227, 45, 17, 213, 4, 236, 69, 248, 120, 55, 165, 77, 32, 155, 8, 231, 19, 20, 39, 91, 157, 47, 172, 48, 127, 87, 49, 94, 47, 242, 214, 122, 76, 2, 21, 26, 235, 53, 59, 216, 222, 20, 49, 164, 252, 141, 54, 182, 208, 231, 245, 93, 6, 61, 226, 205, 161, 29, 26 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a"),
                            Email = "student@mail.ru",
                            PasswordHash = new byte[] { 41, 180, 22, 114, 117, 43, 95, 250, 200, 196, 136, 74, 36, 193, 10, 26, 158, 165, 104, 76, 151, 122, 201, 195, 125, 26, 211, 38, 76, 219, 87, 145, 73, 68, 49, 37, 170, 22, 240, 127, 228, 216, 224, 223, 148, 128, 99, 101, 0, 134, 228, 69, 207, 144, 61, 61, 51, 115, 115, 254, 153, 172, 246, 205 },
                            PasswordSalt = new byte[] { 86, 223, 221, 148, 125, 156, 173, 160, 233, 69, 111, 110, 230, 62, 146, 172, 227, 38, 181, 59, 129, 85, 236, 40, 150, 107, 173, 231, 242, 246, 36, 12, 66, 135, 23, 153, 216, 6, 150, 150, 121, 169, 220, 234, 36, 182, 53, 159, 29, 208, 64, 164, 189, 41, 247, 108, 49, 96, 211, 121, 97, 178, 31, 242, 85, 67, 78, 73, 176, 128, 142, 130, 108, 182, 199, 173, 17, 105, 87, 76, 126, 37, 216, 169, 230, 1, 240, 211, 107, 161, 139, 23, 233, 136, 141, 30, 88, 162, 103, 67, 135, 250, 178, 245, 204, 4, 141, 199, 19, 212, 157, 34, 249, 244, 65, 213, 86, 131, 156, 240, 19, 204, 184, 215, 13, 231, 104, 30 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("95e3df5d-ce44-4f29-95b0-fe3b5b6f2e11"),
                            Email = "teacher@mail.ru",
                            PasswordHash = new byte[] { 152, 132, 191, 178, 97, 160, 48, 26, 100, 180, 26, 124, 17, 10, 199, 96, 2, 169, 182, 159, 66, 91, 8, 45, 241, 31, 8, 83, 39, 164, 5, 203, 64, 140, 116, 207, 82, 230, 82, 99, 73, 153, 123, 34, 122, 214, 20, 95, 237, 180, 111, 193, 91, 33, 174, 163, 231, 201, 13, 164, 201, 225, 201, 156 },
                            PasswordSalt = new byte[] { 255, 237, 90, 146, 155, 125, 36, 139, 86, 70, 86, 174, 13, 64, 254, 209, 6, 160, 146, 177, 143, 253, 161, 153, 136, 167, 151, 172, 83, 139, 201, 71, 48, 210, 249, 71, 151, 99, 89, 128, 40, 27, 245, 120, 168, 2, 236, 62, 137, 219, 138, 70, 113, 4, 174, 48, 204, 173, 15, 110, 130, 184, 135, 141, 126, 63, 37, 229, 183, 225, 75, 156, 117, 53, 159, 67, 117, 82, 51, 34, 47, 167, 168, 245, 215, 5, 87, 65, 71, 234, 73, 163, 54, 112, 43, 194, 120, 67, 114, 191, 92, 6, 202, 165, 70, 158, 103, 125, 58, 108, 180, 47, 223, 38, 151, 115, 0, 78, 12, 4, 47, 217, 105, 154, 70, 8, 249, 174 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("72ddebb1-fafa-47e4-abdd-f851b37c86cd"),
                            Email = "teacherAdmin@mail.ru",
                            PasswordHash = new byte[] { 21, 176, 133, 198, 96, 169, 127, 54, 192, 152, 233, 208, 197, 49, 151, 67, 244, 124, 194, 246, 193, 185, 81, 212, 66, 107, 87, 213, 42, 61, 149, 33, 6, 165, 254, 163, 82, 91, 62, 54, 226, 191, 24, 148, 140, 128, 150, 202, 190, 166, 140, 219, 130, 93, 121, 115, 73, 128, 87, 15, 133, 56, 161, 188 },
                            PasswordSalt = new byte[] { 5, 100, 166, 100, 234, 146, 156, 255, 120, 13, 65, 230, 107, 64, 4, 185, 163, 12, 193, 40, 54, 101, 16, 88, 106, 173, 99, 215, 223, 159, 136, 180, 73, 222, 62, 162, 142, 89, 8, 57, 144, 212, 143, 255, 164, 205, 109, 55, 222, 7, 134, 135, 61, 66, 15, 1, 111, 18, 129, 110, 165, 200, 124, 33, 10, 28, 86, 98, 155, 208, 118, 3, 199, 155, 186, 248, 245, 107, 157, 4, 179, 255, 133, 5, 109, 53, 14, 65, 102, 230, 109, 160, 212, 98, 250, 155, 204, 235, 90, 208, 190, 58, 93, 191, 209, 186, 115, 162, 69, 119, 104, 167, 172, 230, 34, 122, 116, 246, 198, 102, 221, 144, 190, 169, 7, 192, 242, 47 },
                            RefreshToken = "",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.SubjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectNameApiTable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectNameCurriculum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubjectMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3380a51b-1f07-4cf0-ace0-c51a7d5a4703"),
                            SubjectNameApiTable = "История россии",
                            SubjectNameCurriculum = "История России"
                        },
                        new
                        {
                            Id = new Guid("cba78abd-13a1-475e-b63c-bd9ccc535c3f"),
                            SubjectNameApiTable = "Управление программными проектами",
                            SubjectNameCurriculum = "Управление программными проектами"
                        },
                        new
                        {
                            Id = new Guid("ffac1ca0-c9f0-4bd1-a0f6-62a4e6eaa43b"),
                            SubjectNameApiTable = "Самостоятельная работа студента"
                        },
                        new
                        {
                            Id = new Guid("4e5c1b99-dbbc-45c1-bdba-9a494b9cb44d"),
                            SubjectNameApiTable = "Экономика программной инженерии",
                            SubjectNameCurriculum = "Экономика программной инженерии"
                        },
                        new
                        {
                            Id = new Guid("b173fb95-4426-4f37-a591-bc558ccb6f94"),
                            SubjectNameApiTable = "Микропроцессорные системы",
                            SubjectNameCurriculum = "Микропроцессорные системы"
                        },
                        new
                        {
                            Id = new Guid("dfa68c9c-41c1-4414-87c9-fc70ef064737"),
                            SubjectNameApiTable = "Сопровождение программного обеспечения",
                            SubjectNameCurriculum = "Сопровождение программного обеспечения"
                        },
                        new
                        {
                            Id = new Guid("59794029-7b72-46a3-b9b0-f678c996ab1f"),
                            SubjectNameApiTable = "Математический аhализ",
                            SubjectNameCurriculum = "Математический анализ"
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherSubject", (string)null);

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("c89451dc-37c6-45e7-8ff2-3c6e7721ace1"),
                            UserId = new Guid("95e3df5d-ce44-4f29-95b0-fe3b5b6f2e11")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("\"RoleId\" = '67ec963b-940a-48c0-9299-940f6738633c'");

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9c0ca1d-a83f-4299-a518-e2bf6cd6f439"),
                            GroupId = new Guid("dbc8048f-26ed-4212-bc46-5ba3a438a0d3"),
                            RoleId = new Guid("67ec963b-940a-48c0-9299-940f6738633c"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        },
                        new
                        {
                            Id = new Guid("0069135b-d957-44cf-8a0a-86800352ac00"),
                            GroupId = new Guid("0bbeed8f-6918-40c8-8910-809914dd61d2"),
                            RoleId = new Guid("f1a77887-ff0c-4b04-b19c-fa1e05746d96"),
                            UserId = new Guid("95e3df5d-ce44-4f29-95b0-fe3b5b6f2e11")
                        },
                        new
                        {
                            Id = new Guid("f075b99f-acf3-45b5-b7a3-1fcadb5ad790"),
                            GroupId = new Guid("dbc8048f-26ed-4212-bc46-5ba3a438a0d3"),
                            RoleId = new Guid("f1a77887-ff0c-4b04-b19c-fa1e05746d96"),
                            UserId = new Guid("95e3df5d-ce44-4f29-95b0-fe3b5b6f2e11")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("7fe77e53-3bcb-4df9-92ca-485784d828eb"),
                            UserId = new Guid("5db3e422-1cae-47a5-a705-7f95dc12366a")
                        },
                        new
                        {
                            RoleId = new Guid("67ec963b-940a-48c0-9299-940f6738633c"),
                            UserId = new Guid("5c142cc6-cbed-4068-b7d1-cbe3c37d3a2a")
                        },
                        new
                        {
                            RoleId = new Guid("f1a77887-ff0c-4b04-b19c-fa1e05746d96"),
                            UserId = new Guid("95e3df5d-ce44-4f29-95b0-fe3b5b6f2e11")
                        },
                        new
                        {
                            RoleId = new Guid("f1a77887-ff0c-4b04-b19c-fa1e05746d96"),
                            UserId = new Guid("72ddebb1-fafa-47e4-abdd-f851b37c86cd")
                        },
                        new
                        {
                            RoleId = new Guid("7fe77e53-3bcb-4df9-92ca-485784d828eb"),
                            UserId = new Guid("72ddebb1-fafa-47e4-abdd-f851b37c86cd")
                        });
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWork", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.LabWorkStatus", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.LabWork", "LabWork")
                        .WithMany()
                        .HasForeignKey("LabWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Domain.Entities.Subject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.TeacherSubject", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserGroup", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicProgressTracker.Persistence.Models.UserRole", b =>
                {
                    b.HasOne("AcademicProgressTracker.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicProgressTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
